% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_description.R
\name{gen_description}
\alias{gen_description}
\title{Generate Route Title and Description Using LLM}
\usage{
gen_description(stats, platform, api_key, model, prompt = NULL, ...)
}
\arguments{
\item{stats}{A named list of route statistics generated by \code{analyse_gpx()}.}

\item{platform}{Character string. This maps onto the \verb{chat_*()} functions
available in the {ellmer} package. (See
\url{https://ellmer.tidyverse.org/reference/index.html}) Examples include:
\itemize{
\item "openai" - for \code{chat_openai()}
\item "azure" - for \code{chat_azure()}
\item "gemini" - for \code{chat_gemini()}, and so on.
}}

\item{api_key}{Character string. The API key for the LLM service.}

\item{model}{Character string. The model to use for the LLM (e.g.,
"gpt-3.5-turbo").}

\item{prompt}{Character string. A custom prompt to use for generating the title and description. If set to NULL (default), the function uses the default prompt stored in the package.}

\item{...}{Additional arguments passed to the \code{ellmer::chat_completion()}
function.}
}
\value{
A character string containing the response from the LLM, including
the title and description.
}
\description{
This function takes the statistics generated from
\code{analyse_gpx()} and creates a prompt that can be sent to a large language
model (LLM) using the \code{ellmer} package. The prompt includes a default string
of text with the statistics appended to it, asking the LLM to generate a
title and description for the GPX route.
}
\details{
The function constructs a prompt that describes the route based on
the provided statistics. It then sends the prompt to the LLM using the
\code{ellmer} package and returns the generated response.
}
\examples{
\dontrun{
gpx_path <- system.file("extdata", "icc_intro_ride.gpx", package = "gpxtoolbox")
gpx_path \%>\%
  analyse_gpx(return = "data") \%>\%
  calculate_route_stats() \%>\%
  gen_description(
    platform = "azure",
    api_key = Sys.getenv("AZURE_OPENAI_API_KEY"),
    deployment_id = "gpt-4o-mini"
  )
}

}
