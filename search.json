[{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to gpxtoolbox","text":"gpxtoolbox R package designed processing, analysing, visualising GPS track data GPX files. provides tools calculating route metrics distance, elevation gain/loss, speed, well visualisation capabilities elevation profiles route maps. vignette demonstrates use key functions package.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to gpxtoolbox","text":"can install development version gpxtoolbox GitHub:","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install gpxtoolbox devtools::install_github(\"martinchan/gpxtoolbox\")"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example Workflow","title":"Introduction to gpxtoolbox","text":"package includes example GPX file, icc_intro_ride.gpx, used following examples.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"load-the-package","dir":"Articles","previous_headings":"Example Workflow","what":"Load the Package","title":"Introduction to gpxtoolbox","text":"","code":"library(gpxtoolbox)"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"read-a-gpx-file","dir":"Articles","previous_headings":"Example Workflow","what":"Read a GPX File","title":"Introduction to gpxtoolbox","text":"Use read_gpx_track() function extract track points GPX file.","code":"# Path to the example GPX file example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\")  # Read the GPX file track_data <- read_gpx_track(example_gpx_path)  # View the first few rows of the track data head(track_data)"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"calculate-metrics","dir":"Articles","previous_headings":"Example Workflow","what":"Calculate Metrics","title":"Introduction to gpxtoolbox","text":"Use calculate_distance() calculate_elevation_stats() compute distances elevation statistics.","code":"# Calculate distances track_data <- calculate_distance(track_data)  # Calculate elevation statistics track_data <- calculate_elevation_stats(track_data)  # View the updated track data head(track_data)"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"generate-route-statistics","dir":"Articles","previous_headings":"Example Workflow","what":"Generate Route Statistics","title":"Introduction to gpxtoolbox","text":"Use calculate_route_stats() summarise route statistics total distance, elevation gain, average speed.","code":"# Calculate route statistics stats <- calculate_route_stats(track_data)  # Print the statistics print(stats)"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"visualise-the-route","dir":"Articles","previous_headings":"Example Workflow","what":"Visualise the Route","title":"Introduction to gpxtoolbox","text":"Use plot_route() create visualisations route, including elevation profile route map.","code":"# Plot the route plot_route(track_data)"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"analyse-a-gpx-file-in-one-step","dir":"Articles","previous_headings":"Example Workflow","what":"Analyse a GPX File in One Step","title":"Introduction to gpxtoolbox","text":"analyse_gpx() function provides high-level interface process GPX file return statistics, plots, processed data.","code":"# Analyse the example GPX file and get summary statistics stats <- analyse_gpx(example_gpx_path, return = \"stats\") print(stats)  # Generate a plot of the route analyse_gpx(example_gpx_path, return = \"plot\")  # Get processed track points data track_data <- analyse_gpx(example_gpx_path, return = \"data\")"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"working-with-web-links","dir":"Articles","previous_headings":"","what":"Working with Web Links","title":"Introduction to gpxtoolbox","text":"can also analyse GPX files web links (e.g., Strava RideWithGPS). function automatically download GPX file process .","code":"# Analyse a GPX file from a Strava link # stats <- analyse_gpx(\"https://www.strava.com/routes/3193200014155699162\")  # Analyse a GPX file from a RideWithGPS link # stats <- analyse_gpx(\"https://ridewithgps.com/routes/39294504\")"},{"path":"https://martinctc.github.io/gpxtoolbox/articles/gpxtoolbox.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to gpxtoolbox","text":"gpxtoolbox provides comprehensive set tools working GPX files R. Whether â€™re outdoor enthusiast, athlete, researcher, package makes easy process, analyse, visualise GPS track data.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Chan. Author, maintainer.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan M (2025). gpxtoolbox: Tools Analyzing Visualizing GPX Files. R package version 0.0.0.9000.","code":"@Manual{,   title = {gpxtoolbox: Tools for Analyzing and Visualizing GPX Files},   author = {Martin Chan},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"gpxtoolbox","dir":"","previous_headings":"","what":"Tools for Analyzing and Visualizing GPX Files","title":"Tools for Analyzing and Visualizing GPX Files","text":"Tools analysing visualising GPX files.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Analyzing and Visualizing GPX Files","text":"gpxtoolbox R package designed processing, analysing, visualising GPS track data GPX files. provides tools calculating route metrics distance, elevation gain/loss, speed, well visualisation capabilities elevation profiles route maps. package ideal outdoor enthusiasts, athletes, researchers working GPS tracking data.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Analyzing and Visualizing GPX Files","text":"can install development version gpxtoolbox GitHub:","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install gpxtoolbox devtools::install_github(\"martinchan/gpxtoolbox\")"},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Tools for Analyzing and Visualizing GPX Files","text":"Read GPX Files: Extract track points, including latitude, longitude, elevation, time. Calculate Metrics: Compute distances, elevation gain/loss, cumulative metrics. Visualise Routes: Create elevation profiles route maps using ggplot2. Summarise Statistics: Generate summary statistics distance, elevation, time.","code":""},{"path":[]},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"example-workflow","dir":"","previous_headings":"Usage","what":"Example Workflow","title":"Tools for Analyzing and Visualizing GPX Files","text":"","code":"# Load the package library(gpxtoolbox)  # Use the example GPX file included in the package example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\")  # Read the GPX file track_data <- read_gpx_track(example_gpx_path)  # Calculate distances and elevation statistics track_data <- calculate_distance(track_data) track_data <- calculate_elevation_stats(track_data)  # Generate route statistics stats <- calculate_route_stats(track_data) print(stats)  # Visualise the route plot_route(track_data)"},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"analyse-a-gpx-file-in-one-step","dir":"","previous_headings":"Usage","what":"Analyse a GPX File in One Step","title":"Tools for Analyzing and Visualizing GPX Files","text":"","code":"# Analyse the example GPX file and get summary statistics example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\") stats <- analyse_gpx(example_gpx_path, return = \"stats\")  # Generate a plot of the route analyse_gpx(example_gpx_path, return = \"plot\")  # Get processed track points data track_data <- analyse_gpx(example_gpx_path, return = \"data\")"},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"key-functions","dir":"","previous_headings":"","what":"Key Functions","title":"Tools for Analyzing and Visualizing GPX Files","text":"read_gpx_track(): Reads GPX file extracts track points. calculate_distance(): Calculates distances consecutive track points. calculate_elevation_stats(): Computes elevation gain/loss cumulative metrics. calculate_route_stats(): Summarises route statistics total distance, elevation gain, average speed. plot_route(): Creates visualisations route, including elevation profile route map. analyse_gpx(): high-level function process GPX file return statistics, plots, processed data.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Tools for Analyzing and Visualizing GPX Files","text":"package depends following R packages: - sf: reading GPX files. - dplyr: data manipulation. - geosphere: distance calculations. - ggplot2: creating visualisations.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Analyzing and Visualizing GPX Files","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Analyzing and Visualizing GPX Files","text":"Contributions welcome! Feel free open issues submit pull requests GitHub repository.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tools for Analyzing and Visualizing GPX Files","text":"Special thanks authors sf, dplyr, geosphere, ggplot2 packages, integral functionality gpxtoolbox.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse GPX File â€” analyse_gpx","title":"Analyse GPX File â€” analyse_gpx","text":"Processes GPX file extract route information, calculate metrics distance elevation, provide summary statistics visualization.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse GPX File â€” analyse_gpx","text":"","code":"analyse_gpx(gpx_path, return = \"stats\")"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse GPX File â€” analyse_gpx","text":"gpx_path Character string specifying path GPX file web link route Strava RideWithGPS. return Character string indicating type output return. Options : \"stats\" (default): Returns list summary statistics \"plot\": Generates plot route elevation profile \"data\": Returns processed track points data","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse GPX File â€” analyse_gpx","text":"Depending return parameter: \"stats\": named list route statistics \"plot\": Generates plot \"data\": data frame processed track points calculated metrics","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse GPX File â€” analyse_gpx","text":"web link provided gpx_path, function automatically construct appropriate GPX export URL, download file temporary location, process .","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/analyse_gpx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse GPX File â€” analyse_gpx","text":"","code":"if (FALSE) { # \\dontrun{ # Get route statistics from a local GPX file stats <- analyse_gpx(\"path/to/file.gpx\")  # Get route statistics from a Strava link stats <- analyse_gpx(\"https://www.strava.com/routes/3193200014155699162\")  # Get route statistics from a RideWithGPS link stats <- analyse_gpx(\"https://ridewithgps.com/routes/39294504\") } # }  # Use the example GPX file included in the package example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\")  # Analyse the example GPX file stats <- analyse_gpx(example_gpx_path) #> Reading GPX file: /home/runner/work/_temp/Library/gpxtoolbox/extdata/icc_intro_ride.gpx  print(stats) #> $total_distance_km #> [1] 42.81 #>  #> $total_elevation_gain_m #> [1] 622.2 #>  #> $total_elevation_loss_m #> [1] 556.6 #>  #> $max_elevation_m #> [1] 143 #>  #> $min_elevation_m #> [1] 29.9 #>  #> $start_point #> [1] \"The Gatehouse, Fieldway Crescent, Canonbury, Highbury, London Borough of Islington, London, Greater London, England, N5 1PZ, United Kingdom\" #>  #> $end_point #> [1] \"Archway Road, London Borough of Haringey, London, Greater London, England, N6 4EJ, United Kingdom\" #>  #> $p25_point #> [1] \"Highwood Hill, Mill Hill, London Borough of Barnet, London, Greater London, England, NW7 4HN, United Kingdom\" #>  #> $p50_point #> [1] \"36, Camlet Way, Hadley Wood, London Borough of Enfield, London, Greater London, England, EN4 0LJ, United Kingdom\" #>  #> $p75_point #> [1] \"Lincoln Road, Colney Hatch, London Borough of Barnet, London, Greater London, England, N2 9DJ, United Kingdom\" #>   # Generate a plot of the example GPX file analyse_gpx(example_gpx_path, return = \"plot\") #> Reading GPX file: /home/runner/work/_temp/Library/gpxtoolbox/extdata/icc_intro_ride.gpx"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between GPS track points â€” calculate_distance","title":"Calculate distances between GPS track points â€” calculate_distance","text":"Calculates distance consecutive GPS track points adds individual segment distances cumulative distance track points data frame.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between GPS track points â€” calculate_distance","text":"","code":"calculate_distance(track_points)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between GPS track points â€” calculate_distance","text":"track_points data frame containing track points least following columns: lon - longitude decimal degrees lat - latitude decimal degrees","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between GPS track points â€” calculate_distance","text":"input data frame following additional columns: distance - distance previous point meters (0 first point) cumulative_distance - cumulative distance traveled kilometers","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate distances between GPS track points â€” calculate_distance","text":"function uses Haversine formula calculate great-circle distance consecutive GPS points, accounting curvature Earth. first point distance 0, subsequent point's distance measured previous point.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances between GPS track points â€” calculate_distance","text":"","code":"if (FALSE) { # \\dontrun{ # First read a GPX file track_data <- read_gpx_track(\"path/to/activity.gpx\")  # Calculate distances track_data <- calculate_distance(track_data)  # View the distance data head(track_data[, c(\"lon\", \"lat\", \"distance\", \"cumulative_distance\")]) } # }"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"Calculates elevation gain loss consecutive GPS track points adds metrics track points data frame.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"","code":"calculate_elevation_stats(track_points)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"track_points data frame containing track points least following column: ele - elevation meters","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"input data frame following additional columns: ele_gain - elevation gain meters (0 flat downhill segments) ele_loss - elevation loss meters (0 flat uphill segments) cumulative_ele_gain - cumulative elevation gain meters cumulative_ele_loss - cumulative elevation loss meters","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"function calculates elevation difference consecutive points. Positive changes recorded elevation gain, negative changes recorded elevation loss. function also calculates cumulative metrics track total elevation change entire route.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_elevation_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate elevation statistics from GPS track points â€” calculate_elevation_stats","text":"","code":"if (FALSE) { # \\dontrun{ # First read a GPX file track_data <- read_gpx_track(\"path/to/activity.gpx\")  # Calculate elevation statistics track_data <- calculate_elevation_stats(track_data)  # View the elevation data head(track_data[, c(\"ele\", \"ele_gain\", \"ele_loss\", \"cumulative_ele_gain\")]) } # }"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate route statistics â€” calculate_route_stats","title":"Calculate route statistics â€” calculate_route_stats","text":"Calculates basic statistics GPS track data, including distance, elevation, time metrics.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate route statistics â€” calculate_route_stats","text":"","code":"calculate_route_stats(track_points)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate route statistics â€” calculate_route_stats","text":"track_points data frame containing track points following required columns: cumulative_distance - distance kilometers ele - elevation meters ele_gain - elevation gain meters ele_loss - elevation loss meters time - timestamps POSIXct format (optional, time-based calculations) location - (optional) geographic location points (e.g., \"City, Country\")","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate route statistics â€” calculate_route_stats","text":"list containing following route statistics: total_distance_km - total distance kilometers total_elevation_gain_m - cumulative elevation gain meters total_elevation_loss_m - cumulative elevation loss meters max_elevation_m - maximum elevation meters min_elevation_m - minimum elevation meters total_time_hours - total activity time hours (time data available) avg_speed - average speed km/h (time data available) start_point - (optional) location starting point end_point - (optional) location ending point p25_point - (optional) location 25% route p50_point - (optional) location 50% route p75_point - (optional) location 75% route","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate route statistics â€” calculate_route_stats","text":"function processes track point data extract key statistics GPS route. Time-based statistics calculated input data contains valid timestamps. numeric values rounded 2 decimal places readability.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/calculate_route_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate route statistics â€” calculate_route_stats","text":"","code":"if (FALSE) { # \\dontrun{ # First read a GPX file track_data <- read_gpx_track(\"path/to/activity.gpx\")  # Calculate distance and elevation changes track_data <- calculate_distance(track_data)  # Calculate route statistics stats <- calculate_route_stats(track_data)  # Print the statistics print(stats) } # }"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Route Title and Description Using LLM â€” gen_description","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"function takes statistics generated analyse_gpx() creates prompt can sent large language model (LLM) using ellmer package. prompt includes default string text statistics appended , asking LLM generate title description GPX route.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"","code":"gen_description(stats, platform, api_key, model, ...)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"stats named list route statistics generated analyse_gpx(). platform Character string. maps onto chat_*() functions available ellmer package. (See https://ellmer.tidyverse.org/reference/index.html) Examples include: \"openai\" - chat_openai() \"azure\" - chat_azure() \"gemini\" - chat_gemini(), . api_key Character string. API key LLM service. model Character string. model use LLM (e.g., \"gpt-3.5-turbo\"). ... Additional arguments passed ellmer::chat_completion() function.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"character string containing response LLM, including title description.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"function constructs prompt describes route based provided statistics. sends prompt LLM using ellmer package returns generated response.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/gen_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Route Title and Description Using LLM â€” gen_description","text":"","code":"if (FALSE) { # \\dontrun{ gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\") gpx_path %>%   analyse_gpx(return = \"data\") %>%   calculate_route_stats() %>%   gen_description(     platform = \"azure\",     api_key = Sys.getenv(\"AZURE_OPENAI_API_KEY\"),     deployment_id = \"gpt-4o-mini\"   ) } # }"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify geographic location from GPS coordinates â€” identify_geo","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"Adds geographic location information (e.g., city, country) GPS track points based latitude longitude using OpenStreetMap Nominatim API.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"","code":"identify_geo(track_points, all = FALSE)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"track_points data frame containing track points least following columns: lon - longitude decimal degrees lat - latitude decimal degrees Logical. TRUE, identifies location track points. FALSE (default), identifies location start, end, 25%, 50%, 75% points route. Setting = FALSE helps reduce API usage.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"input data frame additional column geographic information: location - string describing geographic location (e.g., \"City, Country\")","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"function uses OpenStreetMap Nominatim API reverse geocoding. Ensure active internet connection function queries external API. mindful API usage policy.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/identify_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify geographic location from GPS coordinates â€” identify_geo","text":"","code":"if (FALSE) { # \\dontrun{ # First read a GPX file track_data <- read_gpx_track(\"path/to/activity.gpx\")  # Identify geographic locations for start, end, and key points track_data <- identify_geo(track_data)  # Identify geographic locations for all points track_data <- identify_geo(track_data, all = TRUE)  # View the location data head(track_data[, c(\"lon\", \"lat\", \"location\")]) } # }"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GPX route visualisation â€” plot_route","title":"Plot GPX route visualisation â€” plot_route","text":"Creates visualisations GPS route, including elevation profile route map.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GPX route visualisation â€” plot_route","text":"","code":"plot_route(track_points)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GPX route visualisation â€” plot_route","text":"track_points data frame containing track points following required columns: lon - longitude decimal degrees lat - latitude decimal degrees ele - elevation metres cumulative_distance - distance kilometres","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot GPX route visualisation â€” plot_route","text":"Plots displayed current graphics device. function return value.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot GPX route visualisation â€” plot_route","text":"function creates two visualisations: elevation profile showing elevation changes distance travelled simple route map showing geographical path plots created using ggplot2 minimal styling.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/plot_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GPX route visualisation â€” plot_route","text":"","code":"# Use the example GPX file included in the package example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\")  # First read a GPX file track_data <- read_gpx_track(example_gpx_path)  # Calculate cumulative distance (required for plotting) track_data <- calculate_distance(track_data)  # Plot the route visualisations plot_route(track_data)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GPX file and extract track points â€” read_gpx_track","title":"Read GPX file and extract track points â€” read_gpx_track","text":"function reads GPX file extracts track points, including latitude, longitude, elevation, time.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GPX file and extract track points â€” read_gpx_track","text":"","code":"read_gpx_track(gpx_path)"},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GPX file and extract track points â€” read_gpx_track","text":"gpx_path string. Path GPX file.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GPX file and extract track points â€” read_gpx_track","text":"data frame containing track points following columns: lon - longitude decimal degrees lat - latitude decimal degrees ele - elevation meters time - timestamp POSIXct format (UTC)","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GPX file and extract track points â€” read_gpx_track","text":"function uses sf package read GPX files. specifically extracts track_points layer, contains sequential points make GPS track. Time values converted POSIXct objects UTC timezone.","code":""},{"path":"https://martinctc.github.io/gpxtoolbox/reference/read_gpx_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GPX file and extract track points â€” read_gpx_track","text":"","code":"# Use the example GPX file included in the package example_gpx_path <- system.file(\"extdata\", \"icc_intro_ride.gpx\", package = \"gpxtoolbox\")  # Read track points from a GPX file track_data <- read_gpx_track(example_gpx_path)  # View the first few points head(track_data) #> # A tibble: 6 Ã— 4 #>      lon   lat   ele time   #>    <dbl> <dbl> <dbl> <dttm> #> 1 -0.105  51.5  42.8 NA     #> 2 -0.105  51.5  42.7 NA     #> 3 -0.105  51.5  42.1 NA     #> 4 -0.105  51.5  41.5 NA     #> 5 -0.105  51.5  41.4 NA     #> 6 -0.106  51.5  40.7 NA"}]
